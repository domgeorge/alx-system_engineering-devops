SSH-KEYGEN(1)                   BSD General Commands Manual                   SSH-KEYGEN(1)

NNAAMMEE
     sssshh--kkeeyyggeenn — OpenSSH authentication key utility

SSYYNNOOPPSSIISS
     sssshh--kkeeyyggeenn [--qq] [--bb _b_i_t_s] [--CC _c_o_m_m_e_n_t] [--ff _o_u_t_p_u_t___k_e_y_f_i_l_e] [--mm _f_o_r_m_a_t]
                [--tt ddssaa | eeccddssaa | eeccddssaa--sskk | eedd2255551199 | eedd2255551199--sskk | rrssaa]
                [--NN _n_e_w___p_a_s_s_p_h_r_a_s_e] [--OO _o_p_t_i_o_n] [--ww _p_r_o_v_i_d_e_r]
     sssshh--kkeeyyggeenn --pp [--ff _k_e_y_f_i_l_e] [--mm _f_o_r_m_a_t] [--NN _n_e_w___p_a_s_s_p_h_r_a_s_e] [--PP _o_l_d___p_a_s_s_p_h_r_a_s_e]
     sssshh--kkeeyyggeenn --ii [--ff _i_n_p_u_t___k_e_y_f_i_l_e] [--mm _k_e_y___f_o_r_m_a_t]
     sssshh--kkeeyyggeenn --ee [--ff _i_n_p_u_t___k_e_y_f_i_l_e] [--mm _k_e_y___f_o_r_m_a_t]
     sssshh--kkeeyyggeenn --yy [--ff _i_n_p_u_t___k_e_y_f_i_l_e]
     sssshh--kkeeyyggeenn --cc [--CC _c_o_m_m_e_n_t] [--ff _k_e_y_f_i_l_e] [--PP _p_a_s_s_p_h_r_a_s_e]
     sssshh--kkeeyyggeenn --ll [--vv] [--EE _f_i_n_g_e_r_p_r_i_n_t___h_a_s_h] [--ff _i_n_p_u_t___k_e_y_f_i_l_e]
     sssshh--kkeeyyggeenn --BB [--ff _i_n_p_u_t___k_e_y_f_i_l_e]
     sssshh--kkeeyyggeenn --DD _p_k_c_s_1_1
     sssshh--kkeeyyggeenn --FF _h_o_s_t_n_a_m_e [--llvv] [--ff _k_n_o_w_n___h_o_s_t_s___f_i_l_e]
     sssshh--kkeeyyggeenn --HH [--ff _k_n_o_w_n___h_o_s_t_s___f_i_l_e]
     sssshh--kkeeyyggeenn --KK [--ww _p_r_o_v_i_d_e_r]
     sssshh--kkeeyyggeenn --RR _h_o_s_t_n_a_m_e [--ff _k_n_o_w_n___h_o_s_t_s___f_i_l_e]
     sssshh--kkeeyyggeenn --rr _h_o_s_t_n_a_m_e [--gg] [--ff _i_n_p_u_t___k_e_y_f_i_l_e]
     sssshh--kkeeyyggeenn --MM ggeenneerraattee [--OO _o_p_t_i_o_n] _o_u_t_p_u_t___f_i_l_e
     sssshh--kkeeyyggeenn --MM ssccrreeeenn [--ff _i_n_p_u_t___f_i_l_e] [--OO _o_p_t_i_o_n] _o_u_t_p_u_t___f_i_l_e
     sssshh--kkeeyyggeenn --II _c_e_r_t_i_f_i_c_a_t_e___i_d_e_n_t_i_t_y --ss _c_a___k_e_y [--hhUU] [--DD _p_k_c_s_1_1___p_r_o_v_i_d_e_r]
                [--nn _p_r_i_n_c_i_p_a_l_s] [--OO _o_p_t_i_o_n] [--VV _v_a_l_i_d_i_t_y___i_n_t_e_r_v_a_l] [--zz _s_e_r_i_a_l___n_u_m_b_e_r]
                _f_i_l_e _._._.
     sssshh--kkeeyyggeenn --LL [--ff _i_n_p_u_t___k_e_y_f_i_l_e]
     sssshh--kkeeyyggeenn --AA [--ff _p_r_e_f_i_x___p_a_t_h]
     sssshh--kkeeyyggeenn --kk --ff _k_r_l___f_i_l_e [--uu] [--ss _c_a___p_u_b_l_i_c] [--zz _v_e_r_s_i_o_n___n_u_m_b_e_r] _f_i_l_e _._._.
     sssshh--kkeeyyggeenn --QQ --ff _k_r_l___f_i_l_e _f_i_l_e _._._.
     sssshh--kkeeyyggeenn --YY ffiinndd--pprriinncciippaallss --ss _s_i_g_n_a_t_u_r_e___f_i_l_e --ff _a_l_l_o_w_e_d___s_i_g_n_e_r_s___f_i_l_e
     sssshh--kkeeyyggeenn --YY cchheecckk--nnoovvaalliiddaattee --nn _n_a_m_e_s_p_a_c_e --ss _s_i_g_n_a_t_u_r_e___f_i_l_e
     sssshh--kkeeyyggeenn --YY ssiiggnn --ff _k_e_y___f_i_l_e --nn _n_a_m_e_s_p_a_c_e _f_i_l_e _._._.
     sssshh--kkeeyyggeenn --YY vveerriiffyy --ff _a_l_l_o_w_e_d___s_i_g_n_e_r_s___f_i_l_e --II _s_i_g_n_e_r___i_d_e_n_t_i_t_y --nn _n_a_m_e_s_p_a_c_e --ss
                _s_i_g_n_a_t_u_r_e___f_i_l_e [--rr _r_e_v_o_c_a_t_i_o_n___f_i_l_e]

DDEESSCCRRIIPPTTIIOONN
     sssshh--kkeeyyggeenn generates, manages and converts authentication keys for ssh(1).  sssshh--kkeeyyggeenn
     can create keys for use by SSH protocol version 2.

     The type of key to be generated is specified with the --tt option.  If invoked without
     any arguments, sssshh--kkeeyyggeenn will generate an RSA key.

     sssshh--kkeeyyggeenn is also used to generate groups for use in Diffie-Hellman group exchange
     (DH-GEX).  See the _M_O_D_U_L_I _G_E_N_E_R_A_T_I_O_N section for details.

     Finally, sssshh--kkeeyyggeenn can be used to generate and update Key Revocation Lists, and to
     test whether given keys have been revoked by one.  See the _K_E_Y _R_E_V_O_C_A_T_I_O_N _L_I_S_T_S sec‐
     tion for details.

     Normally each user wishing to use SSH with public key authentication runs this once to
     create the authentication key in _~_/_._s_s_h_/_i_d___d_s_a, _~_/_._s_s_h_/_i_d___e_c_d_s_a, _~_/_._s_s_h_/_i_d___e_c_d_s_a___s_k,
     _~_/_._s_s_h_/_i_d___e_d_2_5_5_1_9, _~_/_._s_s_h_/_i_d___e_d_2_5_5_1_9___s_k or _~_/_._s_s_h_/_i_d___r_s_a.  Additionally, the system
     administrator may use this to generate host keys.

     Normally this program generates the key and asks for a file in which to store the pri‐
     vate key.  The public key is stored in a file with the same name but “.pub” appended.
     The program also asks for a passphrase.  The passphrase may be empty to indicate no
     passphrase (host keys must have an empty passphrase), or it may be a string of arbi‐
     trary length.  A passphrase is similar to a password, except it can be a phrase with a
     series of words, punctuation, numbers, whitespace, or any string of characters you
     want.  Good passphrases are 10-30 characters long, are not simple sentences or other‐
     wise easily guessable (English prose has only 1-2 bits of entropy per character, and
     provides very bad passphrases), and contain a mix of upper and lowercase letters, num‐
     bers, and non-alphanumeric characters.  The passphrase can be changed later by using
     the --pp option.

     There is no way to recover a lost passphrase.  If the passphrase is lost or forgotten,
     a new key must be generated and the corresponding public key copied to other machines.

     sssshh--kkeeyyggeenn will by default write keys in an OpenSSH-specific format.  This format is
     preferred as it offers better protection for keys at rest as well as allowing storage
     of key comments within the private key file itself.  The key comment may be useful to
     help identify the key.  The comment is initialized to “user@host” when the key is cre‐
     ated, but can be changed using the --cc option.

     It is still possible for sssshh--kkeeyyggeenn to write the previously-used PEM format private
     keys using the --mm flag.  This may be used when generating new keys, and existing new-
     format keys may be converted using this option in conjunction with the --pp (change
     passphrase) flag.

     After a key is generated, instructions below detail where the keys should be placed to
     be activated.

     The options are as follows:

     --AA      For each of the key types (rsa, dsa, ecdsa and ed25519) for which host keys do
             not exist, generate the host keys with the default key file path, an empty
             passphrase, default bits for the key type, and default comment.  If --ff has
             also been specified, its argument is used as a prefix to the default path for
             the resulting host key files.  This is used by system administration scripts
             to generate new host keys.

     --aa _r_o_u_n_d_s
             When saving a private key, this option specifies the number of KDF (key deri‐
             vation function) rounds used.  Higher numbers result in slower passphrase ver‐
             ification and increased resistance to brute-force password cracking (should
             the keys be stolen).

     --BB      Show the bubblebabble digest of specified private or public key file.

     --bb _b_i_t_s
             Specifies the number of bits in the key to create.  For RSA keys, the minimum
             size is 1024 bits and the default is 3072 bits.  Generally, 3072 bits is con‐
             sidered sufficient.  DSA keys must be exactly 1024 bits as specified by FIPS
             186-2.  For ECDSA keys, the --bb flag determines the key length by selecting
             from one of three elliptic curve sizes: 256, 384 or 521 bits.  Attempting to
             use bit lengths other than these three values for ECDSA keys will fail.
             ECDSA-SK, Ed25519 and Ed25519-SK keys have a fixed length and the --bb flag will
             be ignored.

     --CC _c_o_m_m_e_n_t
             Provides a new comment.

     --cc      Requests changing the comment in the private and public key files.  The pro‐
             gram will prompt for the file containing the private keys, for the passphrase
             if the key has one, and for the new comment.

     --DD _p_k_c_s_1_1
             Download the public keys provided by the PKCS#11 shared library _p_k_c_s_1_1.  When
             used in combination with --ss, this option indicates that a CA key resides in a
             PKCS#11 token (see the _C_E_R_T_I_F_I_C_A_T_E_S section for details).

     --EE _f_i_n_g_e_r_p_r_i_n_t___h_a_s_h
             Specifies the hash algorithm used when displaying key fingerprints.  Valid op‐
             tions are: “md5” and “sha256”.  The default is “sha256”.

     --ee      This option will read a private or public OpenSSH key file and print to stdout
             a public key in one of the formats specified by the --mm option.  The default
             export format is “RFC4716”.  This option allows exporting OpenSSH keys for use
             by other programs, including several commercial SSH implementations.

     --FF _h_o_s_t_n_a_m_e | _[_h_o_s_t_n_a_m_e_]_:_p_o_r_t
             Search for the specified _h_o_s_t_n_a_m_e (with optional port number) in a _k_n_o_w_n___h_o_s_t_s
             file, listing any occurrences found.  This option is useful to find hashed
             host names or addresses and may also be used in conjunction with the --HH option
             to print found keys in a hashed format.

     --ff _f_i_l_e_n_a_m_e
             Specifies the filename of the key file.

     --gg      Use generic DNS format when printing fingerprint resource records using the --rr
             command.

     --HH      Hash a _k_n_o_w_n___h_o_s_t_s file.  This replaces all hostnames and addresses with
             hashed representations within the specified file; the original content is
             moved to a file with a .old suffix.  These hashes may be used normally by sssshh
             and sssshhdd, but they do not reveal identifying information should the file's
             contents be disclosed.  This option will not modify existing hashed hostnames
             and is therefore safe to use on files that mix hashed and non-hashed names.

     --hh      When signing a key, create a host certificate instead of a user certificate.
             Please see the _C_E_R_T_I_F_I_C_A_T_E_S section for details.

     --II _c_e_r_t_i_f_i_c_a_t_e___i_d_e_n_t_i_t_y
             Specify the key identity when signing a public key.  Please see the
             _C_E_R_T_I_F_I_C_A_T_E_S section for details.

     --ii      This option will read an unencrypted private (or public) key file in the for‐
             mat specified by the --mm option and print an OpenSSH compatible private (or
             public) key to stdout.  This option allows importing keys from other software,
             including several commercial SSH implementations.  The default import format
             is “RFC4716”.

     --KK      Download resident keys from a FIDO authenticator.  Public and private key
             files will be written to the current directory for each downloaded key.

     --kk      Generate a KRL file.  In this mode, sssshh--kkeeyyggeenn will generate a KRL file at the
             location specified via the --ff flag that revokes every key or certificate pre‐
             sented on the command line.  Keys/certificates to be revoked may be specified
             by public key file or using the format described in the _K_E_Y _R_E_V_O_C_A_T_I_O_N _L_I_S_T_S
             section.

     --LL      Prints the contents of one or more certificates.

     --ll      Show fingerprint of specified public key file.  For RSA and DSA keys
             sssshh--kkeeyyggeenn tries to find the matching public key file and prints its finger‐
             print.  If combined with --vv, a visual ASCII art representation of the key is
             supplied with the fingerprint.

     --MM ggeenneerraattee
             Generate candidate Diffie-Hellman Group Exchange (DH-GEX) parameters for even‐
             tual use by the ‘diffie-hellman-group-exchange-*’ key exchange methods.  The
             numbers generated by this operation must be further screened before use.  See
             the _M_O_D_U_L_I _G_E_N_E_R_A_T_I_O_N section for more information.

     --MM ssccrreeeenn
             Screen candidate parameters for Diffie-Hellman Group Exchange.  This will ac‐
             cept a list of candidate numbers and test that they are safe (Sophie Germain)
             primes with acceptable group generators.  The results of this operation may be
             added to the _/_e_t_c_/_s_s_h_/_m_o_d_u_l_i file.  See the _M_O_D_U_L_I _G_E_N_E_R_A_T_I_O_N section for more
             information.

     --mm _k_e_y___f_o_r_m_a_t
             Specify a key format for key generation, the --ii (import), --ee (export) conver‐
             sion options, and the --pp change passphrase operation.  The latter may be used
             to convert between OpenSSH private key and PEM private key formats.  The sup‐
             ported key formats are: “RFC4716” (RFC 4716/SSH2 public or private key),
             “PKCS8” (PKCS8 public or private key) or “PEM” (PEM public key).  By default
             OpenSSH will write newly-generated private keys in its own format, but when
             converting public keys for export the default format is “RFC4716”.  Setting a
             format of “PEM” when generating or updating a supported private key type will
             cause the key to be stored in the legacy PEM private key format.

     --NN _n_e_w___p_a_s_s_p_h_r_a_s_e
             Provides the new passphrase.

     --nn _p_r_i_n_c_i_p_a_l_s
             Specify one or more principals (user or host names) to be included in a cer‐
             tificate when signing a key.  Multiple principals may be specified, separated
             by commas.  Please see the _C_E_R_T_I_F_I_C_A_T_E_S section for details.

     --OO _o_p_t_i_o_n
             Specify a key/value option.  These are specific to the operation that
             sssshh--kkeeyyggeenn has been requested to perform.

             When signing certificates, one of the options listed in the _C_E_R_T_I_F_I_C_A_T_E_S sec‐
             tion may be specified here.

             When performing moduli generation or screening, one of the options listed in
             the _M_O_D_U_L_I _G_E_N_E_R_A_T_I_O_N section may be specified.

             When generating a key that will be hosted on a FIDO authenticator, this flag
             may be used to specify key-specific options.  Those supported at present are:

             aapppplliiccaattiioonn
                     Override the default FIDO application/origin string of “ssh:”.  This
                     may be useful when generating host or domain-specific resident keys.
                     The specified application string must begin with “ssh:”.

             cchhaalllleennggee=_p_a_t_h
                     Specifies a path to a challenge string that will be passed to the FIDO
                     token during key generation.  The challenge string may be used as part
                     of an out-of-band protocol for key enrollment (a random challenge is
                     used by default).

             ddeevviiccee  Explicitly specify a fido(4) device to use, rather than letting the
                     token middleware select one.

             nnoo--ttoouucchh--rreeqquuiirreedd
                     Indicate that the generated private key should not require touch
                     events (user presence) when making signatures.  Note that sshd(8) will
                     refuse such signatures by default, unless overridden via an autho‐
                     rized_keys option.

             rreessiiddeenntt
                     Indicate that the key should be stored on the FIDO authenticator it‐
                     self.  Resident keys may be supported on FIDO2 tokens and typically
                     require that a PIN be set on the token prior to generation.  Resident
                     keys may be loaded off the token using ssh-add(1).

             uusseerr    A username to be associated with a resident key, overriding the empty
                     default username.  Specifying a username may be useful when generating
                     multiple resident keys for the same application name.

             wwrriittee--aatttteessttaattiioonn=_p_a_t_h
                     May be used at key generation time to record the attestation certifi‐
                     cate returned from FIDO tokens during key generation.  By default this
                     information is discarded.

             The --OO option may be specified multiple times.

     --PP _p_a_s_s_p_h_r_a_s_e
             Provides the (old) passphrase.

     --pp      Requests changing the passphrase of a private key file instead of creating a
             new private key.  The program will prompt for the file containing the private
             key, for the old passphrase, and twice for the new passphrase.

     --QQ      Test whether keys have been revoked in a KRL.

     --qq      Silence sssshh--kkeeyyggeenn.

     --RR _h_o_s_t_n_a_m_e | _[_h_o_s_t_n_a_m_e_]_:_p_o_r_t
             Removes all keys belonging to the specified _h_o_s_t_n_a_m_e (with optional port num‐
             ber) from a _k_n_o_w_n___h_o_s_t_s file.  This option is useful to delete hashed hosts
             (see the --HH option above).

     --rr _h_o_s_t_n_a_m_e
             Print the SSHFP fingerprint resource record named _h_o_s_t_n_a_m_e for the specified
             public key file.

     --ss _c_a___k_e_y
             Certify (sign) a public key using the specified CA key.  Please see the
             _C_E_R_T_I_F_I_C_A_T_E_S section for details.

             When generating a KRL, --ss specifies a path to a CA public key file used to re‐
             voke certificates directly by key ID or serial number.  See the _K_E_Y _R_E_V_O_C_A_T_I_O_N
             _L_I_S_T_S section for details.

     --tt ddssaa | eeccddssaa | eeccddssaa--sskk | eedd2255551199 | eedd2255551199--sskk | rrssaa
             Specifies the type of key to create.  The possible values are “dsa”, “ecdsa”,
             “ecdsa-sk”, “ed25519”, “ed25519-sk”, or “rsa”.

             This flag may also be used to specify the desired signature type when signing
             certificates using an RSA CA key.  The available RSA signature variants are
             “ssh-rsa” (SHA1 signatures, not recommended), “rsa-sha2-256”, and
             “rsa-sha2-512” (the default).

     --UU      When used in combination with --ss, this option indicates that a CA key resides
             in a ssh-agent(1).  See the _C_E_R_T_I_F_I_C_A_T_E_S section for more information.

     --uu      Update a KRL.  When specified with --kk, keys listed via the command line are
             added to the existing KRL rather than a new KRL being created.

     --VV _v_a_l_i_d_i_t_y___i_n_t_e_r_v_a_l
             Specify a validity interval when signing a certificate.  A validity interval
             may consist of a single time, indicating that the certificate is valid begin‐
             ning now and expiring at that time, or may consist of two times separated by a
             colon to indicate an explicit time interval.

             The start time may be specified as the string “always” to indicate the cer‐
             tificate has no specified start time, a date in YYYYMMDD format, a time in
             YYYYMMDDHHMM[SS] format, a relative time (to the current time) consisting of a
             minus sign followed by an interval in the format described in the TIME FORMATS
             section of sshd_config(5).

             The end time may be specified as a YYYYMMDD date, a YYYYMMDDHHMM[SS] time, a
             relative time starting with a plus character or the string “forever” to indi‐
             cate that the certificate has no expirty date.

             For example: “+52w1d” (valid from now to 52 weeks and one day from now),
             “-4w:+4w” (valid from four weeks ago to four weeks from now),
             “20100101123000:20110101123000” (valid from 12:30 PM, January 1st, 2010 to
             12:30 PM, January 1st, 2011), “-1d:20110101” (valid from yesterday to mid‐
             night, January 1st, 2011).  “-1m:forever” (valid from one minute ago and never
             expiring).

     --vv      Verbose mode.  Causes sssshh--kkeeyyggeenn to print debugging messages about its
             progress.  This is helpful for debugging moduli generation.  Multiple --vv op‐
             tions increase the verbosity.  The maximum is 3.

     --ww _p_r_o_v_i_d_e_r
             Specifies a path to a library that will be used when creating FIDO authentica‐
             tor-hosted keys, overriding the default of using the internal USB HID support.

     --YY ffiinndd--pprriinncciippaallss
             Find the principal(s) associated with the public key of a signature, provided
             using the --ss flag in an authorized signers file provided using the --ff flag.
             The format of the allowed signers file is documented in the _A_L_L_O_W_E_D _S_I_G_N_E_R_S
             section below.  If one or more matching principals are found, they are re‐
             turned on standard output.

     --YY cchheecckk--nnoovvaalliiddaattee
             Checks that a signature generated using sssshh--kkeeyyggeenn --YY ssiiggnn has a valid struc‐
             ture.  This does not validate if a signature comes from an authorized signer.
             When testing a signature, sssshh--kkeeyyggeenn accepts a message on standard input and a
             signature namespace using --nn.  A file containing the corresponding signature
             must also be supplied using the --ss flag.  Successful testing of the signature
             is signalled by sssshh--kkeeyyggeenn returning a zero exit status.

     --YY ssiiggnn
             Cryptographically sign a file or some data using a SSH key.  When signing,
             sssshh--kkeeyyggeenn accepts zero or more files to sign on the command-line - if no
             files are specified then sssshh--kkeeyyggeenn will sign data presented on standard in‐
             put.  Signatures are written to the path of the input file with “.sig” ap‐
             pended, or to standard output if the message to be signed was read from stan‐
             dard input.

             The key used for signing is specified using the --ff option and may refer to ei‐
             ther a private key, or a public key with the private half available via
             ssh-agent(1).  An additional signature namespace, used to prevent signature
             confusion across different domains of use (e.g. file signing vs email signing)
             must be provided via the --nn flag.  Namespaces are arbitrary strings, and may
             include: “file” for file signing, “email” for email signing.  For custom uses,
             it is recommended to use names following a NAMESPACE@YOUR.DOMAIN pattern to
             generate unambiguous namespaces.

     --YY vveerriiffyy
             Request to verify a signature generated using sssshh--kkeeyyggeenn --YY ssiiggnn as described
             above.  When verifying a signature, sssshh--kkeeyyggeenn accepts a message on standard
             input and a signature namespace using --nn.  A file containing the corresponding
             signature must also be supplied using the --ss flag, along with the identity of
             the signer using --II and a list of allowed signers via the --ff flag.  The format
             of the allowed signers file is documented in the _A_L_L_O_W_E_D _S_I_G_N_E_R_S section be‐
             low.  A file containing revoked keys can be passed using the --rr flag.  The re‐
             vocation file may be a KRL or a one-per-line list of public keys.  Successful
             verification by an authorized signer is signalled by sssshh--kkeeyyggeenn returning a
             zero exit status.

     --yy      This option will read a private OpenSSH format file and print an OpenSSH pub‐
             lic key to stdout.

     --zz _s_e_r_i_a_l___n_u_m_b_e_r
             Specifies a serial number to be embedded in the certificate to distinguish
             this certificate from others from the same CA.  If the _s_e_r_i_a_l___n_u_m_b_e_r is pre‐
             fixed with a ‘+’ character, then the serial number will be incremented for
             each certificate signed on a single command-line.  The default serial number
             is zero.

             When generating a KRL, the --zz flag is used to specify a KRL version number.

MMOODDUULLII GGEENNEERRAATTIIOONN
     sssshh--kkeeyyggeenn may be used to generate groups for the Diffie-Hellman Group Exchange (DH-
     GEX) protocol.  Generating these groups is a two-step process: first, candidate primes
     are generated using a fast, but memory intensive process.  These candidate primes are
     then tested for suitability (a CPU-intensive process).

     Generation of primes is performed using the --MM ggeenneerraattee option.  The desired length of
     the primes may be specified by the --OO bbiittss option.  For example:

           # ssh-keygen -M generate -O bits=2048 moduli-2048.candidates

     By default, the search for primes begins at a random point in the desired length
     range.  This may be overridden using the --OO ssttaarrtt option, which specifies a different
     start point (in hex).

     Once a set of candidates have been generated, they must be screened for suitability.
     This may be performed using the --MM ssccrreeeenn option.  In this mode sssshh--kkeeyyggeenn will read
     candidates from standard input (or a file specified using the --ff option).  For exam‐
     ple:

           # ssh-keygen -M screen -f moduli-2048.candidates moduli-2048

     By default, each candidate will be subjected to 100 primality tests.  This may be
     overridden using the --OO pprriimmee--tteessttss option.  The DH generator value will be chosen au‐
     tomatically for the prime under consideration.  If a specific generator is desired, it
     may be requested using the --OO ggeenneerraattoorr option.  Valid generator values are 2, 3, and
     5.

     Screened DH groups may be installed in _/_e_t_c_/_s_s_h_/_m_o_d_u_l_i.  It is important that this
     file contains moduli of a range of bit lengths and that both ends of a connection
     share common moduli.

     A number of options are available for moduli generation and screening via the --OO flag:

     lliinneess=_n_u_m_b_e_r
             Exit after screening the specified number of lines while performing DH candi‐
             date screening.

     ssttaarrtt--lliinnee=_l_i_n_e_-_n_u_m_b_e_r
             Start screening at the specified line number while performing DH candidate
             screening.

     cchheecckkppooiinntt=_f_i_l_e_n_a_m_e
             Write the last line processed to the specified file while performing DH candi‐
             date screening.  This will be used to skip lines in the input file that have
             already been processed if the job is restarted.

     mmeemmoorryy=_m_b_y_t_e_s
             Specify the amount of memory to use (in megabytes) when generating candidate
             moduli for DH-GEX.

     ssttaarrtt=_h_e_x_-_v_a_l_u_e
             Specify start point (in hex) when generating candidate moduli for DH-GEX.

     ggeenneerraattoorr=_v_a_l_u_e
             Specify desired generator (in decimal) when testing candidate moduli for DH-
             GEX.

CCEERRTTIIFFIICCAATTEESS
     sssshh--kkeeyyggeenn supports signing of keys to produce certificates that may be used for user
     or host authentication.  Certificates consist of a public key, some identity informa‐
     tion, zero or more principal (user or host) names and a set of options that are signed
     by a Certification Authority (CA) key.  Clients or servers may then trust only the CA
     key and verify its signature on a certificate rather than trusting many user/host
     keys.  Note that OpenSSH certificates are a different, and much simpler, format to the
     X.509 certificates used in ssl(8).

     sssshh--kkeeyyggeenn supports two types of certificates: user and host.  User certificates au‐
     thenticate users to servers, whereas host certificates authenticate server hosts to
     users.  To generate a user certificate:

           $ ssh-keygen -s /path/to/ca_key -I key_id /path/to/user_key.pub

     The resultant certificate will be placed in _/_p_a_t_h_/_t_o_/_u_s_e_r___k_e_y_-_c_e_r_t_._p_u_b.  A host cer‐
     tificate requires the --hh option:

           $ ssh-keygen -s /path/to/ca_key -I key_id -h /path/to/host_key.pub

     The host certificate will be output to _/_p_a_t_h_/_t_o_/_h_o_s_t___k_e_y_-_c_e_r_t_._p_u_b.

     It is possible to sign using a CA key stored in a PKCS#11 token by providing the token
     library using --DD and identifying the CA key by providing its public half as an argu‐
     ment to --ss:

           $ ssh-keygen -s ca_key.pub -D libpkcs11.so -I key_id user_key.pub

     Similarly, it is possible for the CA key to be hosted in a ssh-agent(1).  This is in‐
     dicated by the --UU flag and, again, the CA key must be identified by its public half.

           $ ssh-keygen -Us ca_key.pub -I key_id user_key.pub

     In all cases, _k_e_y___i_d is a "key identifier" that is logged by the server when the cer‐
     tificate is used for authentication.

     Certificates may be limited to be valid for a set of principal (user/host) names.  By
     default, generated certificates are valid for all users or hosts.  To generate a cer‐
     tificate for a specified set of principals:

           $ ssh-keygen -s ca_key -I key_id -n user1,user2 user_key.pub
           $ ssh-keygen -s ca_key -I key_id -h -n host.domain host_key.pub

     Additional limitations on the validity and use of user certificates may be specified
     through certificate options.  A certificate option may disable features of the SSH
     session, may be valid only when presented from particular source addresses or may
     force the use of a specific command.

     The options that are valid for user certificates are:

     cclleeaarr   Clear all enabled permissions.  This is useful for clearing the default set of
             permissions so permissions may be added individually.

     ccrriittiiccaall:_n_a_m_e[=_c_o_n_t_e_n_t_s]
     eexxtteennssiioonn:_n_a_m_e[=_c_o_n_t_e_n_t_s]
             Includes an arbitrary certificate critical option or extension.  The specified
             _n_a_m_e should include a domain suffix, e.g. “name@example.com”.  If _c_o_n_t_e_n_t_s is
             specified then it is included as the contents of the extension/option encoded
             as a string, otherwise the extension/option is created with no contents (usu‐
             ally indicating a flag).  Extensions may be ignored by a client or server that
             does not recognise them, whereas unknown critical options will cause the cer‐
             tificate to be refused.

     ffoorrccee--ccoommmmaanndd=_c_o_m_m_a_n_d
             Forces the execution of _c_o_m_m_a_n_d instead of any shell or command specified by
             the user when the certificate is used for authentication.

     nnoo--aaggeenntt--ffoorrwwaarrddiinngg
             Disable ssh-agent(1) forwarding (permitted by default).

     nnoo--ppoorrtt--ffoorrwwaarrddiinngg
             Disable port forwarding (permitted by default).

     nnoo--ppttyy  Disable PTY allocation (permitted by default).

     nnoo--uusseerr--rrcc
             Disable execution of _~_/_._s_s_h_/_r_c by sshd(8) (permitted by default).

     nnoo--xx1111--ffoorrwwaarrddiinngg
             Disable X11 forwarding (permitted by default).

     ppeerrmmiitt--aaggeenntt--ffoorrwwaarrddiinngg
             Allows ssh-agent(1) forwarding.

     ppeerrmmiitt--ppoorrtt--ffoorrwwaarrddiinngg
             Allows port forwarding.

     ppeerrmmiitt--ppttyy
             Allows PTY allocation.

     ppeerrmmiitt--uusseerr--rrcc
             Allows execution of _~_/_._s_s_h_/_r_c by sshd(8).

     ppeerrmmiitt--XX1111--ffoorrwwaarrddiinngg
             Allows X11 forwarding.

     nnoo--ttoouucchh--rreeqquuiirreedd
             Do not require signatures made using this key require demonstration of user
             presence (e.g. by having the user touch the authenticator).  This option only
             makes sense for the FIDO authenticator algorithms eeccddssaa--sskk and eedd2255551199--sskk.

     ssoouurrccee--aaddddrreessss=_a_d_d_r_e_s_s___l_i_s_t
             Restrict the source addresses from which the certificate is considered valid.
             The _a_d_d_r_e_s_s___l_i_s_t is a comma-separated list of one or more address/netmask
             pairs in CIDR format.

     At present, no standard options are valid for host keys.

     Finally, certificates may be defined with a validity lifetime.  The --VV option allows
     specification of certificate start and end times.  A certificate that is presented at
     a time outside this range will not be considered valid.  By default, certificates are
     valid from UNIX Epoch to the distant future.

     For certificates to be used for user or host authentication, the CA public key must be
     trusted by sshd(8) or ssh(1).  Please refer to those manual pages for details.

KKEEYY RREEVVOOCCAATTIIOONN LLIISSTTSS
     sssshh--kkeeyyggeenn is able to manage OpenSSH format Key Revocation Lists (KRLs).  These binary
     files specify keys or certificates to be revoked using a compact format, taking as
     little as one bit per certificate if they are being revoked by serial number.

     KRLs may be generated using the --kk flag.  This option reads one or more files from the
     command line and generates a new KRL.  The files may either contain a KRL specifica‐
     tion (see below) or public keys, listed one per line.  Plain public keys are revoked
     by listing their hash or contents in the KRL and certificates revoked by serial number
     or key ID (if the serial is zero or not available).

     Revoking keys using a KRL specification offers explicit control over the types of
     record used to revoke keys and may be used to directly revoke certificates by serial
     number or key ID without having the complete original certificate on hand.  A KRL
     specification consists of lines containing one of the following directives followed by
     a colon and some directive-specific information.

     sseerriiaall: _s_e_r_i_a_l___n_u_m_b_e_r[-_s_e_r_i_a_l___n_u_m_b_e_r]
             Revokes a certificate with the specified serial number.  Serial numbers are
             64-bit values, not including zero and may be expressed in decimal, hex or oc‐
             tal.  If two serial numbers are specified separated by a hyphen, then the
             range of serial numbers including and between each is revoked.  The CA key
             must have been specified on the sssshh--kkeeyyggeenn command line using the --ss option.

     iidd: _k_e_y___i_d
             Revokes a certificate with the specified key ID string.  The CA key must have
             been specified on the sssshh--kkeeyyggeenn command line using the --ss option.

     kkeeyy: _p_u_b_l_i_c___k_e_y
             Revokes the specified key.  If a certificate is listed, then it is revoked as
             a plain public key.

     sshhaa11: _p_u_b_l_i_c___k_e_y
             Revokes the specified key by including its SHA1 hash in the KRL.

     sshhaa225566: _p_u_b_l_i_c___k_e_y
             Revokes the specified key by including its SHA256 hash in the KRL.  KRLs that
             revoke keys by SHA256 hash are not supported by OpenSSH versions prior to 7.9.

     hhaasshh: _f_i_n_g_e_r_p_r_i_n_t
             Revokes a key using a fingerprint hash, as obtained from a sshd(8) authentica‐
             tion log message or the sssshh--kkeeyyggeenn --ll flag.  Only SHA256 fingerprints are sup‐
             ported here and resultant KRLs are not supported by OpenSSH versions prior to
             7.9.

     KRLs may be updated using the --uu flag in addition to --kk.  When this option is speci‐
     fied, keys listed via the command line are merged into the KRL, adding to those al‐
     ready there.

     It is also possible, given a KRL, to test whether it revokes a particular key (or
     keys).  The --QQ flag will query an existing KRL, testing each key specified on the com‐
     mand line.  If any key listed on the command line has been revoked (or an error en‐
     countered) then sssshh--kkeeyyggeenn will exit with a non-zero exit status.  A zero exit status
     will only be returned if no key was revoked.

AALLLLOOWWEEDD SSIIGGNNEERRSS
     When verifying signatures, sssshh--kkeeyyggeenn uses a simple list of identities and keys to de‐
     termine whether a signature comes from an authorized source.  This "allowed signers"
     file uses a format patterned after the AUTHORIZED_KEYS FILE FORMAT described in
     sshd(8).  Each line of the file contains the following space-separated fields: princi‐
     pals, options, keytype, base64-encoded key.  Empty lines and lines starting with a ‘#’
     are ignored as comments.

     The principals field is a pattern-list (See PATTERNS in ssh_config(5)) consisting of
     one or more comma-separated USER@DOMAIN identity patterns that are accepted for sign‐
     ing.  When verifying, the identity presented via the --II option must match a principals
     pattern in order for the corresponding key to be considered acceptable for verifica‐
     tion.

     The options (if present) consist of comma-separated option specifications.  No spaces
     are permitted, except within double quotes.  The following option specifications are
     supported (note that option keywords are case-insensitive):

     cceerrtt--aauutthhoorriittyy
             Indicates that this key is accepted as a certificate authority (CA) and that
             certificates signed by this CA may be accepted for verification.

     nnaammeessppaacceess==""nnaammeessppaaccee--lliisstt""
             Specifies a pattern-list of namespaces that are accepted for this key.  If
             this option is present, the signature namespace embedded in the signature ob‐
             ject and presented on the verification command-line must match the specified
             list before the key will be considered acceptable.

     When verifying signatures made by certificates, the expected principal name must match
     both the principals pattern in the allowed signers file and the principals embedded in
     the certificate itself.

     An example allowed signers file:

        # Comments allowed at start of line
        user1@example.com,user2@example.com ssh-rsa AAAAX1...
        # A certificate authority, trusted for all principals in a domain.
        *@example.com cert-authority ssh-ed25519 AAAB4...
        # A key that is accepted only for file signing.
        user2@example.com namespaces="file" ssh-ed25519 AAA41...

EENNVVIIRROONNMMEENNTT
     SSH_SK_PROVIDER
             Specifies a path to a library that will be used when loading any FIDO authen‐
             ticator-hosted keys, overriding the default of using the built-in USB HID sup‐
             port.

FFIILLEESS
     ~/.ssh/id_dsa
     ~/.ssh/id_ecdsa
     ~/.ssh/id_ecdsa_sk
     ~/.ssh/id_ed25519
     ~/.ssh/id_ed25519_sk
     ~/.ssh/id_rsa
             Contains the DSA, ECDSA, authenticator-hosted ECDSA, Ed25519, authenticator-
             hosted Ed25519 or RSA authentication identity of the user.  This file should
             not be readable by anyone but the user.  It is possible to specify a
             passphrase when generating the key; that passphrase will be used to encrypt
             the private part of this file using 128-bit AES.  This file is not automati‐
             cally accessed by sssshh--kkeeyyggeenn but it is offered as the default file for the
             private key.  ssh(1) will read this file when a login attempt is made.

     ~/.ssh/id_dsa.pub
     ~/.ssh/id_ecdsa.pub
     ~/.ssh/id_ecdsa_sk.pub
     ~/.ssh/id_ed25519.pub
     ~/.ssh/id_ed25519_sk.pub
     ~/.ssh/id_rsa.pub
             Contains the DSA, ECDSA, authenticator-hosted ECDSA, Ed25519, authenticator-
             hosted Ed25519 or RSA public key for authentication.  The contents of this
             file should be added to _~_/_._s_s_h_/_a_u_t_h_o_r_i_z_e_d___k_e_y_s on all machines where the user
             wishes to log in using public key authentication.  There is no need to keep
             the contents of this file secret.

     /etc/ssh/moduli
             Contains Diffie-Hellman groups used for DH-GEX.  The file format is described
             in moduli(5).

SSEEEE AALLSSOO
     ssh(1), ssh-add(1), ssh-agent(1), moduli(5), sshd(8)

     _T_h_e _S_e_c_u_r_e _S_h_e_l_l _(_S_S_H_) _P_u_b_l_i_c _K_e_y _F_i_l_e _F_o_r_m_a_t, RFC 4716, 2006.

AAUUTTHHOORRSS
     OpenSSH is a derivative of the original and free ssh 1.2.12 release by Tatu Ylonen.
     Aaron Campbell, Bob Beck, Markus Friedl, Niels Provos, Theo de Raadt and Dug Song re‐
     moved many bugs, re-added newer features and created OpenSSH.  Markus Friedl contrib‐
     uted the support for SSH protocol versions 1.5 and 2.0.

BSD                                   February 7, 2020                                  BSD
